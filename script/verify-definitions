#!/usr/bin/env bash
# Usage: script/verify-definitions <COMMIT-RANGE>

set -euo pipefail

help_text() {
  sed -ne '/^#/!q;s/.\{1,2\}//;1d;p' < "$0"
}

compute_sha2() {
  local output
  output="$(openssl dgst -sha256)"
  echo "${output##* }" | tr '[:upper:]' '[:lower:]'
}

download_package() {
  curl -qsSfL -o "$2" "$1"
}

download_and_verify() {
  local checksum
  local url="$1"
  local file="$2"
  local expected="$3"
  download_package "$url" "$file"
  checksum="$(compute_sha2 < "$file")"
  if [ "$checksum" != "$expected" ]; then
    echo "Error: $url doesn't match its checksum $expected" >&2
    return 1
  fi
}

changed_files() {
  local commit_range="$1"
  git diff --name-only --diff-filter=ACMR "$commit_range" -- ./share/node-build
}

potentially_new_packages() {
  local commit_range="$1"
  local files

  mapfile -t files < <(changed_files "$commit_range")

  [ ${#files[@]} -ne 0 ] && extract_urls "${files[@]}"
}

extract_urls() {
  $(type -p ggrep grep | head -1) -hoe 'http[^"]\+#[^"]\+' "$@" | sort | uniq
}

verify() {
  local url checksum file
  local commit_range="$1"
  echo "Verifying changes from $commit_range"
  changed_files "$commit_range"
  for url in $(potentially_new_packages "$commit_range"); do
    checksum="${url#*#}"
    url="${url%#*}"
    echo "Verifying checksum for $url"
    file="${TMPDIR:-/tmp}/$checksum"
    download_and_verify "$url" "$file" "$checksum"
  done
}

case "${1:-}" in
  '' )
    echo "COMMIT-RANGE required" >&2
    help_text >&2
    exit 1
    ;;
  -h | --help )
    help_text
    exit 0
    ;;
  * )
    verify "$@"
    ;;
esac
